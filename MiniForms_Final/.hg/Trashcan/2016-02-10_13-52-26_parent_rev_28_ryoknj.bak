diff --git a/MiniForms/Modules/Qrcode/QrCodeModule.cs b/MiniForms/Modules/Qrcode/QrCodeModule.cs
deleted file mode 100644
--- a/MiniForms/Modules/Qrcode/QrCodeModule.cs
+++ /dev/null
@@ -1,12 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace MiniForms.Modules.Qrcode
-{
-    class QrCodeModule
-    {
-    }
-}
diff --git a/MiniForms/VoiceRec/VoiceRecognition.cs b/MiniForms/VoiceRec/VoiceRecognition.cs
new file mode 100644
--- /dev/null
+++ b/MiniForms/VoiceRec/VoiceRecognition.cs
@@ -0,0 +1,38 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+using MiniForms.Interfaces;
+using MiniForms.Process;
+
+namespace MiniForms.VoiceRec
+{
+    class VoiceRecognition : IModule
+    {
+        public string Name { get; set; }
+        public string Description { get; set; }
+
+        public VoiceRecognition()
+        {
+            Name = "Voice REC";
+        }
+
+        public void EditModule()
+        {
+            diaVoiceRec v = new diaVoiceRec();
+            v.Show();     
+        }
+
+        public void Run(ProcessInstance instance)
+        {
+            throw new NotImplementedException();
+        }
+
+        public override string ToString()
+        {
+            return Name;
+        }
+    }
+}
diff --git a/MiniForms/VoiceRec/diaVoiceRec.Designer.cs b/MiniForms/VoiceRec/diaVoiceRec.Designer.cs
new file mode 100644
--- /dev/null
+++ b/MiniForms/VoiceRec/diaVoiceRec.Designer.cs
@@ -0,0 +1,113 @@
+﻿namespace MiniForms.VoiceRec
+{
+    partial class diaVoiceRec
+    {
+        /// <summary>
+        /// Required designer variable.
+        /// </summary>
+        private System.ComponentModel.IContainer components = null;
+
+        /// <summary>
+        /// Clean up any resources being used.
+        /// </summary>
+        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
+        protected override void Dispose(bool disposing)
+        {
+            if (disposing && (components != null))
+            {
+                components.Dispose();
+            }
+            base.Dispose(disposing);
+        }
+
+        #region Windows Form Designer generated code
+
+        /// <summary>
+        /// Required method for Designer support - do not modify
+        /// the contents of this method with the code editor.
+        /// </summary>
+        private void InitializeComponent()
+        {
+            this.txtInput = new System.Windows.Forms.TextBox();
+            this.btnRead = new System.Windows.Forms.Button();
+            this.btnStart = new System.Windows.Forms.Button();
+            this.btnStop = new System.Windows.Forms.Button();
+            this.lbCommands = new System.Windows.Forms.ListBox();
+            this.SuspendLayout();
+            // 
+            // txtInput
+            // 
+            this.txtInput.BackColor = System.Drawing.Color.Black;
+            this.txtInput.ForeColor = System.Drawing.Color.White;
+            this.txtInput.Location = new System.Drawing.Point(12, 12);
+            this.txtInput.Multiline = true;
+            this.txtInput.Name = "txtInput";
+            this.txtInput.Size = new System.Drawing.Size(418, 364);
+            this.txtInput.TabIndex = 0;
+            // 
+            // btnRead
+            // 
+            this.btnRead.Location = new System.Drawing.Point(436, 13);
+            this.btnRead.Name = "btnRead";
+            this.btnRead.Size = new System.Drawing.Size(75, 23);
+            this.btnRead.TabIndex = 1;
+            this.btnRead.Text = "Read Text";
+            this.btnRead.UseVisualStyleBackColor = true;
+            this.btnRead.Click += new System.EventHandler(this.btnRead_Click);
+            // 
+            // btnStart
+            // 
+            this.btnStart.Location = new System.Drawing.Point(517, 13);
+            this.btnStart.Name = "btnStart";
+            this.btnStart.Size = new System.Drawing.Size(75, 23);
+            this.btnStart.TabIndex = 2;
+            this.btnStart.Text = "Start REC";
+            this.btnStart.UseVisualStyleBackColor = true;
+            this.btnStart.Click += new System.EventHandler(this.btnStart_Click);
+            // 
+            // btnStop
+            // 
+            this.btnStop.Location = new System.Drawing.Point(598, 12);
+            this.btnStop.Name = "btnStop";
+            this.btnStop.Size = new System.Drawing.Size(75, 23);
+            this.btnStop.TabIndex = 3;
+            this.btnStop.Text = "Stop REC";
+            this.btnStop.UseVisualStyleBackColor = true;
+            this.btnStop.Click += new System.EventHandler(this.btnStop_Click);
+            // 
+            // lbCommands
+            // 
+            this.lbCommands.BackColor = System.Drawing.Color.Black;
+            this.lbCommands.ForeColor = System.Drawing.Color.White;
+            this.lbCommands.FormattingEnabled = true;
+            this.lbCommands.Location = new System.Drawing.Point(436, 42);
+            this.lbCommands.Name = "lbCommands";
+            this.lbCommands.Size = new System.Drawing.Size(237, 329);
+            this.lbCommands.TabIndex = 4;
+            // 
+            // diaVoiceRec
+            // 
+            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
+            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+            this.ClientSize = new System.Drawing.Size(685, 388);
+            this.Controls.Add(this.lbCommands);
+            this.Controls.Add(this.btnStop);
+            this.Controls.Add(this.btnStart);
+            this.Controls.Add(this.btnRead);
+            this.Controls.Add(this.txtInput);
+            this.Name = "diaVoiceRec";
+            this.Text = "diaVoiceRec";
+            this.ResumeLayout(false);
+            this.PerformLayout();
+
+        }
+
+        #endregion
+
+        private System.Windows.Forms.TextBox txtInput;
+        private System.Windows.Forms.Button btnRead;
+        private System.Windows.Forms.Button btnStart;
+        private System.Windows.Forms.Button btnStop;
+        private System.Windows.Forms.ListBox lbCommands;
+    }
+}
\ No newline at end of file
diff --git a/MiniForms/VoiceRec/diaVoiceRec.cs b/MiniForms/VoiceRec/diaVoiceRec.cs
new file mode 100644
--- /dev/null
+++ b/MiniForms/VoiceRec/diaVoiceRec.cs
@@ -0,0 +1,146 @@
+﻿using System;
+using System.Collections.Generic;
+using System.ComponentModel;
+using System.Data;
+using System.Drawing;
+using System.IO;
+using System.Linq;
+using System.Speech.Recognition;
+using System.Speech.Synthesis;
+using System.Text;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace MiniForms.VoiceRec
+{
+    public partial class diaVoiceRec : Form
+    {
+        SpeechRecognitionEngine _recognizer = new SpeechRecognitionEngine();
+        SpeechSynthesizer Monica = new SpeechSynthesizer();
+        DateTime now = DateTime.Now;
+        String userName = Environment.UserName;
+        Random rnd = new Random();
+        String greetChoice;
+        public bool StartSpeaking = false;
+
+        public diaVoiceRec()
+        {
+            InitializeComponent();
+            _recognizer.SetInputToDefaultAudioDevice();
+            _recognizer.LoadGrammar(new Grammar(new GrammarBuilder(new Choices(File.ReadAllLines(@"Commands.txt")))));
+            _recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(_recognizer_SpeechRecognized);
+            _recognizer.RecognizeAsync(RecognizeMode.Multiple);
+        }
+
+        private void _recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)
+        {
+            if (e.Result.Text != "" && StartSpeaking == true)
+            {
+                string time = now.GetDateTimeFormats('t')[0];
+                int ranNum;
+                string speech = e.Result.Text;
+                switch (speech)
+                {
+                    //BASIC COMMANDS
+                    case "Hello":
+                    case "Hello Monica":
+                        if (now.Hour >= 5 && now.Hour < 12)
+                        { Monica.Speak("Goodmorning " + userName + ", nice to see you again"); }
+                        if (now.Hour >= 12 && now.Hour < 18)
+                        { Monica.Speak("Good afternoon " + userName + ", nice to see you again"); }
+                        if (now.Hour >= 18 && now.Hour < 24)
+                        { Monica.Speak("Good evening " + userName + ", nice to see you again"); }
+                        if (now.Hour < 5)
+                        { Monica.Speak("Hello, it is getting late " + userName); }
+                        break;
+                    case "How are you":
+                        Monica.Speak("I'm fine, thanks for asking");
+                        break;
+                    case "Goodbye":
+                    case "Close":
+                    case "Exit":
+                        Monica.Speak("Goodbye");
+                        Close();
+                        break;
+                    case "Monica":
+                        ranNum = rnd.Next(1, 3);
+                        if (ranNum == 1) { greetChoice = ""; Monica.Speak("Yes sir"); }
+                        else if (ranNum == 2) { greetChoice = ""; Monica.Speak("Yes?"); }
+                        break;
+                    case "Thank you":
+                        Monica.Speak("No thanks");
+                        break;
+
+                    //CONDITION OF DAY
+                    case "What time is it":
+                        Monica.Speak(time);
+                        break;
+                    case "What day is it":
+                        Monica.Speak(DateTime.Today.ToString("dddd"));
+                        break;
+                    case "Whats the date":
+                    case "Whats todays date":
+                        Monica.Speak(DateTime.Today.ToString("MM-dd-yyyy"));
+                        break;
+
+                    //OTHER COMMANDS                
+                    case "Out of the way":
+                        if (WindowState == FormWindowState.Normal)
+                        {
+                            WindowState = FormWindowState.Minimized;
+                            Monica.Speak("My apologies");
+                        }
+                        break;
+                    case "Come back":
+                        if (WindowState == FormWindowState.Minimized)
+                        {
+                            Monica.Speak("Alright?");
+                            WindowState = FormWindowState.Normal;
+                        }
+                        break;
+                    case "Show commands":
+                        string[] commands = File.ReadAllLines("Commands.txt");
+                        Monica.Speak("Here they are");
+                        lbCommands.Items.Clear();
+                        lbCommands.SelectionMode = SelectionMode.None;
+                        lbCommands.Visible = true;
+                        foreach (string command in commands)
+                        {
+                            lbCommands.Items.Add(command);
+                        }
+                        break;
+                    case "Hide commands":
+                        lbCommands.Visible = false;
+                        break;
+                }
+            }
+        }
+
+        private void btnRead_Click(object sender, EventArgs e)
+        {
+            if (string.IsNullOrEmpty(txtInput.Text))
+            {
+                Monica.SpeakAsync("Sorry,  I can't read without text, Enter text first");
+            }
+            else
+            {
+                Monica.Dispose();
+                Monica = new SpeechSynthesizer();
+                Monica.SpeakAsync(txtInput.Text); // print the text in text box
+            }
+        }
+
+        private void btnStart_Click(object sender, EventArgs e)
+        {
+            btnStart.Enabled = false;
+            StartSpeaking = true;
+        }
+
+        private void btnStop_Click(object sender, EventArgs e)
+        {
+            btnStop.Enabled = false;
+            btnStart.Enabled = true;
+            StartSpeaking = false;
+        }
+    }
+}
diff --git a/MiniForms/VoiceRec/diaVoiceRec.resx b/MiniForms/VoiceRec/diaVoiceRec.resx
new file mode 100644
--- /dev/null
+++ b/MiniForms/VoiceRec/diaVoiceRec.resx
@@ -0,0 +1,120 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" use="required" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+</root>
\ No newline at end of file
